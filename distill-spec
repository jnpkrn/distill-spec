#!/usr/bin/env python
# Copyright 2017 Red Hat, Inc.
# Part of distill-spec project (emerged from clufter)
# Licensed under GPLv2+ (a copy included | http://gnu.org/licenses/gpl-2.0.txt)

from __future__ import print_function

# Script to distill plain specfile from meta (but still usable!) specfile.
#
# TODO:
# - skip-prefix -> semi-preprocessed, e.g., keeping if-else-endif, etc.
#
# Convert snippets like this:
#     %if 0%{?rhel} < 7
#     %bcond_with generated_schemas
#     %else
#     %bcond_without generated_schemas
#     %endif
# into this:
#     %{echo:
#     SOMEHASH
#     %if 0%%{?rhel} < 7
#     %%bcond_with generated_schemas
#     %else
#     %%bcond_without generated_schemas
#     %endif
#     }
# which will subsequently with rpmSpecParse call get converted into this
# on stderr:
#     SOMEHASH
#     %if 0%{?rhel} < 7
#     %bcond_with generated_schemas
#     %else
#     %bcond_without generated_schemas
#     %endif
# which can then be merged, using SOMEHASH as a guide, into the main output.

from base64 import (urlsafe_b64encode as b64encode,
                    urlsafe_b64decode as b64decode)
from ctypes import cdll, c_char_p, c_int, c_void_p
from functools import reduce
from getopt import GetoptError, gnu_getopt
from re import compile as re_compile, escape as re_escape, X as re_X
from sys import argv, stderr, stdin
from tempfile import NamedTemporaryFile

from rpm import RPMSPEC_ANYARCH, RPMSPEC_FORCE, RPMBUILD_NONE, _rpmb, addMacro

# Python 3 compatibility
from sys import version_info
if version_info[0] >= 3:
    bytes_enc = (lambda s, encoding='ascii':
                    bytes(s, encoding) if not isinstance(s, bytes) else s)
    str_enc = lambda s, encoding='ascii': str(s, encoding)
else:
    bytes_enc = lambda s, *args: bytes(s)
    str_enc = lambda s, *args: str(s)


PREFIX = "distill-spec-prefix:"
NS     = "distill_"

# we need to be careful about where we insert the prefix (inner identifier)
transform = lambda x: ''.join((NS + s if i == 1 else s for i, s
                               in enumerate(x.partition(x.lstrip('%{!?')[0]))))
do_add_macro = addMacro


# ctypes magic

rpmb = cdll[_rpmb.__file__]

rpmSpecParse          = rpmb.rpmSpecParse
rpmSpecParse.argtypes = [c_char_p, c_int, c_void_p]
rpmSpecParse.restype  = c_void_p

rpmSpecGetSection          = rpmb.rpmSpecGetSection
rpmSpecGetSection.argtypes = [c_void_p, c_int]
rpmSpecGetSection.restype  = c_char_p


# re stuff

# temporary wrapping must start with '_' or '/' because of Requires context:
# error: line 87:
# Dependency tokens must begin with alpha-numeric, '_' or '/':
# Requires:       @@_bindir@@/nano
neutral_mark = "_._"
nm_parens = ((neutral_mark, ) * 2)
nm_parens_re = ((re_escape(neutral_mark), ) * 2)

re_noexpand = lambda e: re_compile("""(?<!%)
                                        %({{)?
                                          (?!
                                            (?:!?\?)?
                                              (?:

                                                {0}

                                                |\d+
                                                |\*{{1,2}}
                                                |\#
                                                |-\w+\*?

                                                #see rpm/rpmio/macro.c

                                                |load|global|define|undefine
                                                |echo|warn|error
                                                |trace|dump|lua

                                                |basename|dirname|suffix
                                                |expand|verbose|uncompress
                                                |url2path|u2p|getenv|getconfdir
                                                #|S|P|F

                                                |SOURCE|PATCH

                                                |bcond_with(?:out)?|with[ ]


                                                # see rpm/build/parseSpec.c

                                                |if|else|endif

                                                |package|description|files
                                                |changelog

                                                |prep|build|install|check|clean

                                                |pre(?:un|trans)?
                                                |post(?:un|trans)?
                                                |trigger(?:postun|prein|un|in)?

                                                |verifyscript|sepolicy


                                                # see rpm/build/parsePrep.c

                                                |prep
                                                |setup


                                                # see rpm/build/files.c

                                                |attr|defattr
                                                |dev

                                                |dir|docdir
                                                |doc|license|readme
                                                |pubkey
                                                |ghost

                                                |caps
                                                |config
                                                |lang

                                                |exclude
                                                |verify|defverify

                                              )
                                            \W)
                                            (?P<g>(?:!?\?)?(?P<m>[^:%{{(\s}}]+))
                                            (?(1)}}|(?!.*%)  # do not continue
                                                             # if unbraced macro
                                                             # followed by
                                                             # another macro
                                            )""".format('|'.join(
                                            (i + '\w*') for i in e
                                        )),
                         re_X)
re_nonexpmacro_wrapped = re_compile("(?P<m>\S*?)".join(nm_parens_re))
re_multiline = re_compile('\n\n+')


def get_parsed(f):
    spec = rpmSpecParse(bytes_enc(f), RPMSPEC_ANYARCH | RPMSPEC_FORCE, 0)
    s = str_enc(rpmSpecGetSection(spec, RPMBUILD_NONE), 'utf-8')
    return s

def add_macro(name, spec):
    print("adding:", name, '=', spec, restore_macros(spec).join(('(', ')')),
          file=stderr)
    addMacro(name, spec)


def _record(re):
    do_add_macro(
        transform(re.group('m')),
        str_enc(b64encode(bytes_enc(re.group(0)))).replace('=', '+')
                                                  .join(nm_parens)
    )
    return transform(re.group(0))


def redef_macros(f, s, expand=(), skip_prefix=False):
    if not skip_prefix:
        expand, startpos = list(expand), 0
        while True:
            newpos = s.find(PREFIX, startpos)
            if newpos == -1:
                break
            newpos += len(PREFIX)
            startpos = s.find("\n", newpos)
            if startpos == -1:
                break
            expand.extend((i.strip() for i in s[newpos:startpos].split(',')))
        s = s[startpos + 1:]
    s = re_noexpand(expand).sub(
        lambda m: _record(m), s#.replace("%%{", "%%%%{")
    )

    f.write(s)
    f.flush()
    return f


def restore_macros(s):
    return re_nonexpmacro_wrapped.sub(lambda m: "{0}".format(
                                          tuple(
                                              n for n in (str_enc(b64decode(
                                                  bytes_enc(m.group('m').replace('+', '='))
                                              ), 'utf-8'), )
                                          )[0]),
                                      s)


def squeeze_newlines(s):
    #return re_multiline.sub('\n\n', s).lstrip('\n')
    return '\n'.join(reduce(
        lambda prev, new: prev[:-1] + [new] if not prev[-1]
                          and (prev[-2].split(':', 1)[0] == new.split(':', 1)[0]
                               or not prev[-2])
                          else prev + [new], s.splitlines(), ['', '']
    )[1:]).lstrip()


if __name__ == "__main__":
    opts, args, expand, skip_prefix = [], [], [], False
    try:
        opts, args = gnu_getopt(argv[1:], "D:de:s",
                                ("define=", "debug", "expand=", "skip-prefix",
                                 "with=", "without="))
    except GetoptError:
         pass
    for o, a in opts:
        if o in ("-D", "--define"):
            do_add_macro(*tuple(i.strip() for i in a.split(' ', 1)))
        elif o == "-d":
            do_add_macro = add_macro
        elif o in ("-e", "--expand"):
            expand.extend((i.strip() for i in a.split(',')))
        elif o in ("-s", "--skip-prefix"):
            skip_prefix = True
        elif o in("--with", "--without"):
            fmt = (o.lstrip('-'), a.strip())
            opts.append(("--define", "_{0}_{1} --{0}-{1}".format(*fmt)))
    f = args[0] if args else stdin
    if f is not stdin:
        f = open(f, 'r')
    s = f.read()
    if f is not stdin:
        f.close()

    # first, redefine macros in following way:
    # 1. replace name, version, ... with upper-cased version, because
    #    the are the automatic macros that's get (re)defined when parsing
    #    the specfile -- this way we can preserve them in combinarion w/ 2.
    # 2. redefine macros to be preserved (i.e., not native directives/tags
    #    and clufter* macros that we wan't to expand right now) with
    #    base64-encoded original macro declaration (i.e., with initial
    #    question mark, etc.) so that it will be replaced like this
    #    in the specfile preprocessing phase (XXX why not to replace it
    #    right away then?)
    # + second, preprocess the specfile (with new macros)
    with NamedTemporaryFile('w') as f:
        s = get_parsed(redef_macros(f, s, expand, skip_prefix).name)

    # third, restore those now base64-encoded macros
    # + fourth, smart-squeeze the newlines (2+ x \n --> 2 x \n, ...)
    s = squeeze_newlines(restore_macros(s))

    print(s)
